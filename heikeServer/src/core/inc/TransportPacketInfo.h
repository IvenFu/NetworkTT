#ifndef _H_TRANSPORT_INFO_H
#define _H_TRANSPORT_INFO_H
#include "TPR_Utils.h"
#include "Util.h"
using std::map;
struct PacketInfo 
{
    static const int kNotAProbe = -1;

    // Time corresponding to when this object was created.
    TPR_INT64 creation_time_ms;
    // Time corresponding to when the packet was received. Timestamped with the
    // receiver's clock.
    TPR_INT64 arrival_time_ms;
    // Time corresponding to when the packet was sent, timestamped with the
    // sender's clock.
    TPR_INT64 send_time_ms;
    // Packet identifier, incremented with 1 for every packet generated by the
    // sender.
    TPR_UINT16 sequence_number;
    // Size of the packet excluding RTP headers.
    int payload_size;
    // Which probing cluster this packets belongs to.
    int probe_cluster_id;
};

typedef map<TPR_INT64, PacketInfo> HistoryMap;          //数据包信息映射

class PacketInfoComparator 
{
public:
    inline bool operator()(const PacketInfo& lhs, const PacketInfo& rhs) 
    {
        if (lhs.arrival_time_ms != rhs.arrival_time_ms)
            return lhs.arrival_time_ms < rhs.arrival_time_ms;
        if (lhs.send_time_ms != rhs.send_time_ms)
            return lhs.send_time_ms < rhs.send_time_ms;
        return lhs.sequence_number < rhs.sequence_number;
    }
};
#endif